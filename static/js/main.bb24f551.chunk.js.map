{"version":3,"sources":["components/Clock.js","components/buttons/Config.js","components/buttons/PlayPause.js","components/buttons/Reset.js","components/buttons/ButtonContainer.js","audios/switch.wav","config-modal/CloseButton.js","config-modal/ConfigModal.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Seconds","seconds","minutes","Math","floor","secs","pretty_secs","className","Decimals","decimals","Clock","isPlayerOne","turn","switchPlayers","time","setTime","paused","decrementTime","prevTime","useEffect","interval","setInterval","clearInterval","onClick","Config","PlayPause","icon","Reset","ButtonContainer","onClickPlayPause","onClickSettings","onClickReset","CloseButton","ConfigModal","setActive","initialTime","App","useState","setInitialTime","playerOneTurn","setPlayerOneTurn","setPaused","timeOne","setTimeOne","timeTwo","setTimeTwo","settingsActive","setSettingsActive","Audio","switch_audio","audio","volume","navigator","console","log","wakeLock","request","then","catch","err","currentPlayerOne","play","configModal","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bb24f551.chunk.js","sourcesContent":["import { useEffect } from 'react'\n\n\nconst Seconds = ({ seconds }) => {\n\n    const minutes = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    const pretty_secs = secs < 10 ? '0' + secs : secs\n\n    return (\n        <span className=\"seconds\">{`${minutes}:${pretty_secs}`}</span>\n    )\n}\n\nconst Decimals = ({ decimals }) => {\n    return (\n        <span className=\"decimals\">{decimals}</span>\n    )\n}\n\n\nconst Clock = ({ isPlayerOne, turn, switchPlayers, time, setTime, paused }) => {\n\n    const getSeconds = () => {\n        return Math.floor(time / 10)\n    }\n\n    const getDecimals = () => {\n        return time % 10\n    }\n\n    const clickHandler = () => {\n        if (turn && !paused) switchPlayers();\n    }\n\n\n    const decrementTime = () => {\n        setTime((prevTime) => {\n            if (prevTime <= 0) return 0\n            return prevTime - 1\n        })\n    }\n\n    useEffect(() => {\n\n        let interval;\n        if (turn && !paused && time > 0) {\n            interval = setInterval(decrementTime, 100)\n        }\n        return () => {\n            if (turn) clearInterval(interval)\n        }\n    }, [turn, paused])\n\n    return (\n        <div className={`clock ${isPlayerOne ? 'player-one' : 'player-two'} ${turn && !paused ? 'active' : ''}`}\n            onClick={clickHandler}\n        >\n            <p className=\"clock-text\">\n                <Seconds seconds={getSeconds()} />\n                .\n                <Decimals decimals={getDecimals()} />\n            </p>\n        </div>\n    )\n}\n\nexport default Clock\n","import { IoSettingsSharp } from \"react-icons/io5\"\n\nconst Config = ({ onClick }) => {\n    return (\n        <div className=\"button config-button\" onClick={onClick}>\n            <IoSettingsSharp />\n        </div>\n    )\n}\n\nexport default Config\n","import { IoPause, IoPlay } from \"react-icons/io5\"\n\n\nconst PlayPause = ({paused, onClick}) => {\n\n    let icon = paused ? <IoPlay /> : <IoPause />\n    return (\n        <div className=\"button play-pause-button\" onClick={onClick}>\n            {icon}\n        </div>\n    )\n}\n\nexport default PlayPause","import { IoRefresh } from \"react-icons/io5\"\n\nconst Reset = ({onClick}) => {\n    return (\n        <div className=\"button reset-button\" onClick={onClick}>\n            <IoRefresh  />\n        </div>\n    )\n}\n\nexport default Reset\n","import Config from \"./Config\"\nimport PlayPause from \"./PlayPause\"\nimport Reset from \"./Reset\"\n\nconst ButtonContainer = ({paused, onClickPlayPause, onClickSettings, onClickReset}) => {\n    return (\n        <div className='button-container'>\n            <Config onClick={onClickSettings} />\n            <div className='spacer'></div>\n            <PlayPause onClick={onClickPlayPause} paused={paused}/>\n            <div className='spacer'></div>\n            <Reset onClick={onClickReset}/>\n        </div>\n    )\n}\n\nexport default ButtonContainer\n","export default __webpack_public_path__ + \"static/media/switch.868a6b6e.wav\";","import { IoClose } from \"react-icons/io5\"\n\nconst CloseButton = ({ onClick }) => {\n    return (\n        <div className=\"close-config-button\" onClick={onClick}>\n            <IoClose />\n        </div>\n    )\n}\n\nexport default CloseButton\n","import CloseButton from \"./CloseButton\"\n\nconst ConfigModal = ({setActive, initialTime}) => {\n    return (\n        <div className={`modal-base`}> \n            <div className=\"config-window\">\n                <CloseButton onClick={() => setActive(false) }/>\n            </div>\n        </div>\n    )\n}\n\nexport default ConfigModal\n","import Clock from './components/Clock'\nimport { useEffect, useState } from 'react'\nimport ButtonContainer from './components/buttons/ButtonContainer'\nimport switch_audio from './audios/switch.wav'\nimport './App.css';\nimport ConfigModal from './config-modal/ConfigModal'\n\nconst App = () => {\n\n  const [initialTime, setInitialTime] = useState(9000)\n  const [playerOneTurn, setPlayerOneTurn] = useState(true)\n  const [paused, setPaused] = useState(true)\n  const [timeOne, setTimeOne] = useState(initialTime)\n  const [timeTwo, setTimeTwo] = useState(initialTime)\n\n  const [settingsActive, setSettingsActive] = useState(false)\n\n  const [audio, setAudio] = useState(new Audio(switch_audio))\n\n  useEffect(() => {\n    audio.volume = 0.7\n\n    if ('wakeLock' in navigator) {\n      console.log('wakelock in navigator!')\n      navigator.wakeLock.request('screen')\n        .then(() => console.log('Wakelock acquired'))\n        .catch((err) => console.log(err))\n    }\n  }, [])\n  \n\n\n  const switchPlayers = () => {\n    setPlayerOneTurn((currentPlayerOne) => !currentPlayerOne)\n    audio.play()\n  }\n\n  const onClickPlayPause = () =>{\n    setPaused(!paused)\n  }\n\n  const onClickSettings = () => {\n    setPaused(true)\n    setSettingsActive(true)\n  }\n\n  const onClickReset = () => {\n    setPaused(true)\n    setPlayerOneTurn(true)\n    setTimeOne(initialTime)\n    setTimeTwo(initialTime)\n  }\n\n  let configModal = null\n  if (settingsActive){\n    configModal = <ConfigModal\n      setActive={setSettingsActive}\n      initialTime={initialTime}\n      setInitialTime={setInitialTime}\n    />\n  }\n\n  return (\n    <div className=\"app-container\">\n      { configModal }\n\n      <Clock\n        turn={!playerOneTurn}\n        isPlayerOne={false}\n        time={timeTwo}\n        setTime={setTimeTwo}\n        initialTime={initialTime}\n        switchPlayers={switchPlayers}\n        paused={paused}\n      />\n      \n      <ButtonContainer\n        paused={paused}\n        onClickSettings={onClickSettings}\n        onClickPlayPause={onClickPlayPause}\n        onClickReset={onClickReset}\n      />\n\n      <Clock\n        turn={playerOneTurn}\n        isPlayerOne={true}\n        time={timeOne}\n        setTime={setTimeOne}\n        switchPlayers={switchPlayers}\n        paused={paused}\n      />\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}